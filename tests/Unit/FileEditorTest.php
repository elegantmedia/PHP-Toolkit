<?php
namespace ElegantMedia\PHPToolkit\Tests\Unit;

use ElegantMedia\PHPToolkit\Exceptions\FileSystem\SectionAlreadyExistsException;
use ElegantMedia\PHPToolkit\FileEditor;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Attributes\Test;
class FileEditorTest extends TestCase
{
	private static $file = '_file.txt';
	private static $fileContent = 'foo';
	private static $stub = '_stub.txt';
	private static $stubContent = 'bar';

	protected function setUp(): void
	{
		parent::setUp();

		file_put_contents(static::$file, static::$fileContent);
		file_put_contents(static::$stub, static::$stubContent);
	}

	protected function tearDown(): void
	{
		unlink(static::$file);
		unlink(static::$stub);

		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	#[Test]
	public function testFileEditorAppendStubAppendsStub()
	{
		$this->assertEquals(static::$fileContent, file_get_contents(static::$file));
		FileEditor::appendStub('_file.txt', '_stub.txt');

		$fileContent = static::$fileContent;
		$stubContent = static::$stubContent;

		$this->assertEquals("{$fileContent}\r\n{$stubContent}", file_get_contents(static::$file));
	}

	#[Test]
	public function testFileEditorAppendStubIfSectionNotFoundAppendsWithoutSection()
	{
		$this->assertEquals(static::$fileContent, file_get_contents(static::$file));
		FileEditor::appendStubIfSectionNotFound('_file.txt', '_stub.txt');

		$fileContent = static::$fileContent;
		$stubContent = static::$stubContent;

		$this->assertEquals("{$fileContent}\r\n{$stubContent}", file_get_contents(static::$file));
	}

	#[Test]
	public function testFileEditorAppendStubIfSectionNotFoundAppendsEvenIfSectionExists()
	{
		$this->assertEquals(static::$fileContent, file_get_contents(static::$file));
		FileEditor::appendStubIfSectionNotFound('_file.txt', '_stub.txt', static::$fileContent);

		$fileContent = static::$fileContent;
		$stubContent = static::$stubContent;

		$this->assertEquals("{$fileContent}\r\n{$stubContent}", file_get_contents(static::$file));
	}

	#[Test]
	public function testFileEditorAppendStubIfSectionNotFoundConfirmsDuplicateSection()
	{
		$this->assertEquals(static::$fileContent, file_get_contents(static::$file));

		$this->expectException(SectionAlreadyExistsException::class);
		FileEditor::appendStubIfSectionNotFound('_file.txt', '_stub.txt', static::$fileContent, null, true);
	}

	#[Test]
	public function testFileEditorGetPHPClassName()
	{
		$path = __DIR__.'/../../src/Arr.php';

		// FQ class name
		$this->assertEquals('\\'. \ElegantMedia\PHPToolkit\Arr::class, FileEditor::getPHPClassName($path));

		// Without slash
		$this->assertEquals(\ElegantMedia\PHPToolkit\Arr::class, FileEditor::getPHPClassName($path, true, true));

		// Without slash and namespace
		$this->assertEquals('Arr', FileEditor::getPHPClassName($path, false, true));
	}

	#[Test]
	public function testFileEditorReadFirstLineSkipsPHPTag()
	{
		$file = __DIR__.'/test_data/stub1.php';

		$this->assertEquals('// Start Stub', FileEditor::readFirstLine($file));
	}

	#[Test]
	public function testFileEditorReadFirstLineGetsPHPTag()
	{
		$file = __DIR__.'/test_data/stub1.php';

		$this->assertEquals('<?php', FileEditor::readFirstLine($file, true, false));
	}
}
